name: CI/CD Main

permissions:
  contents: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint code
        run: echo "Linting code..."
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_VAR_project: ${{ secrets.TF_VAR_project }}
      TF_VAR_region: ${{ secrets.TF_VAR_region }}
      TF_VAR_zone: ${{ secrets.TF_VAR_zone }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Créer credentials.json pour GCP
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > terraform/credentials.json
      - name: Vérifier le credentials.json
        run: jq . terraform/credentials.json
      - name: Générer terraform.tfvars
        run: |
          cat <<EOF > terraform/terraform.tfvars
          project = "${{ secrets.TF_VAR_project }}"
          region  = "${{ secrets.TF_VAR_region }}"
          zone    = "${{ secrets.TF_VAR_zone }}"
          EOF

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init
      - name: Terraform apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
  ansible:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Installer Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible jq
      - name: Récupérer les outputs Terraform
        id: tf-out
        working-directory: ./terraform
        run: terraform output -json > tf_outputs.json
      - name: Extraire l'IP de la VM
        run: |
          echo "VM_IP=$(jq -r .instance_external_ip.value terraform/tf_outputs.json)" >> $GITHUB_ENV
      - name: Copier la clé SSH
        run: |
          echo "${{ secrets.VM_SSH_KEY }}" > key.pem
          chmod 600 key.pem
      - name: Exécuter le playbook Ansible
        run: |
          ansible-playbook -i "$VM_IP," -u debian --private-key key.pem playbook.yml
  test:
    runs-on: ubuntu-latest
    needs: [lint, ansible]
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: echo "Running tests..."

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Build app
        run: echo "Building app..."

  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Package app
        run: echo "Packaging app..."

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: package
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to production
        run: echo "Deploying to production..."

  snapshot:
    runs-on: ubuntu-latest
    needs: deploy-prod
    steps:
      - name: Create snapshot
        run: echo "Creating snapshot..."

  rollback:
    runs-on: ubuntu-latest
    steps:
      - name: Rollback procedure
        run: echo "Rollback procedure..."

        
  update-tag:
    runs-on: ubuntu-latest
    needs: deploy-prod
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # pour que git voie tous les tags
      - name: Set or update 'latest' tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -f latest HEAD
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin latest --force